
HAL_Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c14  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08000cd4  08000cd4  00010cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d04  08000d04  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000d04  08000d04  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d04  08000d04  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d04  08000d04  00010d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d08  08000d08  00010d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000d0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000d18  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000d18  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002469  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c0c  00000000  00000000  0002249d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000328  00000000  00000000  000230b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002b0  00000000  00000000  000233d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dc87  00000000  00000000  00023688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003dd3  00000000  00000000  0003130f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005324b  00000000  00000000  000350e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008832d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000098c  00000000  00000000  00088380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000cbc 	.word	0x08000cbc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08000cbc 	.word	0x08000cbc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
#include "stm32f0xx.h"

void SYS_CLOCK(void);
void GPIO_PINS(void);

int main(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0

	// SETUP
	SYS_CLOCK();
 8000224:	f000 f80c 	bl	8000240 <SYS_CLOCK>
	GPIO_PINS();
 8000228:	f000 f834 	bl	8000294 <GPIO_PINS>

	// LOOP
	while(1) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 800022c:	2390      	movs	r3, #144	; 0x90
 800022e:	05db      	lsls	r3, r3, #23
 8000230:	2110      	movs	r1, #16
 8000232:	0018      	movs	r0, r3
 8000234:	f000 fb36 	bl	80008a4 <HAL_GPIO_TogglePin>
		HAL_Delay(12);
 8000238:	200c      	movs	r0, #12
 800023a:	f000 f8eb 	bl	8000414 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 800023e:	e7f5      	b.n	800022c <main+0xc>

08000240 <SYS_CLOCK>:
	}
	return 0;
}

void SYS_CLOCK(void) {
 8000240:	b580      	push	{r7, lr}
 8000242:	b090      	sub	sp, #64	; 0x40
 8000244:	af00      	add	r7, sp, #0

	RCC_OscInitTypeDef OSC_CONF;

	OSC_CONF.OscillatorType = RCC_OSCILLATORTYPE_HSI; // Internal 8MHz oscillator
 8000246:	2110      	movs	r1, #16
 8000248:	187b      	adds	r3, r7, r1
 800024a:	2202      	movs	r2, #2
 800024c:	601a      	str	r2, [r3, #0]
	OSC_CONF.HSIState = RCC_HSI_ON; // Enable HSI
 800024e:	187b      	adds	r3, r7, r1
 8000250:	2201      	movs	r2, #1
 8000252:	60da      	str	r2, [r3, #12]
	OSC_CONF.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT; // Default 8MHz configuration
 8000254:	187b      	adds	r3, r7, r1
 8000256:	2210      	movs	r2, #16
 8000258:	611a      	str	r2, [r3, #16]
	OSC_CONF.PLL.PLLState = RCC_PLL_NONE; // Not using frequency multiplier
 800025a:	187b      	adds	r3, r7, r1
 800025c:	2200      	movs	r2, #0
 800025e:	621a      	str	r2, [r3, #32]
	HAL_RCC_GetOscConfig(&OSC_CONF);
 8000260:	187b      	adds	r3, r7, r1
 8000262:	0018      	movs	r0, r3
 8000264:	f000 fc6c 	bl	8000b40 <HAL_RCC_GetOscConfig>

	RCC_ClkInitTypeDef CLK_CONF;
	CLK_CONF.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8000268:	003b      	movs	r3, r7
 800026a:	2207      	movs	r2, #7
 800026c:	601a      	str	r2, [r3, #0]
	CLK_CONF.SYSCLKSource = RCC_SYSCLKSOURCE_HSI; // Clock source is the 8MHz oscillator
 800026e:	003b      	movs	r3, r7
 8000270:	2200      	movs	r2, #0
 8000272:	605a      	str	r2, [r3, #4]
	CLK_CONF.AHBCLKDivider = RCC_SYSCLK_DIV1; // Divide system clock by 1, this clock is used by AHB Bus
 8000274:	003b      	movs	r3, r7
 8000276:	2200      	movs	r2, #0
 8000278:	609a      	str	r2, [r3, #8]
	CLK_CONF.APB1CLKDivider = RCC_HCLK_DIV1; // Divide clock by 1, clock is used by TIMERS, RTC, UART, PWM, I2C
 800027a:	003b      	movs	r3, r7
 800027c:	2200      	movs	r2, #0
 800027e:	60da      	str	r2, [r3, #12]
	HAL_RCC_ClockConfig(&CLK_CONF, 0);
 8000280:	003b      	movs	r3, r7
 8000282:	2100      	movs	r1, #0
 8000284:	0018      	movs	r0, r3
 8000286:	f000 fb29 	bl	80008dc <HAL_RCC_ClockConfig>
}
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	46bd      	mov	sp, r7
 800028e:	b010      	add	sp, #64	; 0x40
 8000290:	bd80      	pop	{r7, pc}
	...

08000294 <GPIO_PINS>:

void GPIO_PINS(void) {
 8000294:	b580      	push	{r7, lr}
 8000296:	b086      	sub	sp, #24
 8000298:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOA_CLK_ENABLE(); // Enable system clock to GPIOA
 800029a:	4b12      	ldr	r3, [pc, #72]	; (80002e4 <GPIO_PINS+0x50>)
 800029c:	695a      	ldr	r2, [r3, #20]
 800029e:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <GPIO_PINS+0x50>)
 80002a0:	2180      	movs	r1, #128	; 0x80
 80002a2:	0289      	lsls	r1, r1, #10
 80002a4:	430a      	orrs	r2, r1
 80002a6:	615a      	str	r2, [r3, #20]
 80002a8:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <GPIO_PINS+0x50>)
 80002aa:	695a      	ldr	r2, [r3, #20]
 80002ac:	2380      	movs	r3, #128	; 0x80
 80002ae:	029b      	lsls	r3, r3, #10
 80002b0:	4013      	ands	r3, r2
 80002b2:	603b      	str	r3, [r7, #0]
 80002b4:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef GPIO_CONF;

	GPIO_CONF.Pin = GPIO_PIN_4;
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2210      	movs	r2, #16
 80002ba:	601a      	str	r2, [r3, #0]
	GPIO_CONF.Mode = GPIO_MODE_OUTPUT_PP; // Push-pull output
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2201      	movs	r2, #1
 80002c0:	605a      	str	r2, [r3, #4]
	GPIO_CONF.Pull = GPIO_NOPULL;
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2200      	movs	r2, #0
 80002c6:	609a      	str	r2, [r3, #8]
	GPIO_CONF.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	2201      	movs	r2, #1
 80002cc:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_CONF);
 80002ce:	1d3a      	adds	r2, r7, #4
 80002d0:	2390      	movs	r3, #144	; 0x90
 80002d2:	05db      	lsls	r3, r3, #23
 80002d4:	0011      	movs	r1, r2
 80002d6:	0018      	movs	r0, r3
 80002d8:	f000 f974 	bl	80005c4 <HAL_GPIO_Init>
}
 80002dc:	46c0      	nop			; (mov r8, r8)
 80002de:	46bd      	mov	sp, r7
 80002e0:	b006      	add	sp, #24
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	40021000 	.word	0x40021000

080002e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002ec:	e7fe      	b.n	80002ec <NMI_Handler+0x4>

080002ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002ee:	b580      	push	{r7, lr}
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002f2:	e7fe      	b.n	80002f2 <HardFault_Handler+0x4>

080002f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80002f8:	46c0      	nop			; (mov r8, r8)
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}

080002fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002fe:	b580      	push	{r7, lr}
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}

08000308 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800030c:	f000 f866 	bl	80003dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000310:	46c0      	nop			; (mov r8, r8)
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}

08000316 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000316:	b580      	push	{r7, lr}
 8000318:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000320:	480d      	ldr	r0, [pc, #52]	; (8000358 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000322:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000324:	480d      	ldr	r0, [pc, #52]	; (800035c <LoopForever+0x6>)
  ldr r1, =_edata
 8000326:	490e      	ldr	r1, [pc, #56]	; (8000360 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000328:	4a0e      	ldr	r2, [pc, #56]	; (8000364 <LoopForever+0xe>)
  movs r3, #0
 800032a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800032c:	e002      	b.n	8000334 <LoopCopyDataInit>

0800032e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800032e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000332:	3304      	adds	r3, #4

08000334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000338:	d3f9      	bcc.n	800032e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800033a:	4a0b      	ldr	r2, [pc, #44]	; (8000368 <LoopForever+0x12>)
  ldr r4, =_ebss
 800033c:	4c0b      	ldr	r4, [pc, #44]	; (800036c <LoopForever+0x16>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000340:	e001      	b.n	8000346 <LoopFillZerobss>

08000342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000344:	3204      	adds	r2, #4

08000346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000348:	d3fb      	bcc.n	8000342 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800034a:	f7ff ffe4 	bl	8000316 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800034e:	f000 fc91 	bl	8000c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000352:	f7ff ff65 	bl	8000220 <main>

08000356 <LoopForever>:

LoopForever:
    b LoopForever
 8000356:	e7fe      	b.n	8000356 <LoopForever>
  ldr   r0, =_estack
 8000358:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800035c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000360:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000364:	08000d0c 	.word	0x08000d0c
  ldr r2, =_sbss
 8000368:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800036c:	2000002c 	.word	0x2000002c

08000370 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000370:	e7fe      	b.n	8000370 <ADC1_IRQHandler>
	...

08000374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000374:	b590      	push	{r4, r7, lr}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800037c:	4b14      	ldr	r3, [pc, #80]	; (80003d0 <HAL_InitTick+0x5c>)
 800037e:	681c      	ldr	r4, [r3, #0]
 8000380:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <HAL_InitTick+0x60>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	0019      	movs	r1, r3
 8000386:	23fa      	movs	r3, #250	; 0xfa
 8000388:	0098      	lsls	r0, r3, #2
 800038a:	f7ff febd 	bl	8000108 <__udivsi3>
 800038e:	0003      	movs	r3, r0
 8000390:	0019      	movs	r1, r3
 8000392:	0020      	movs	r0, r4
 8000394:	f7ff feb8 	bl	8000108 <__udivsi3>
 8000398:	0003      	movs	r3, r0
 800039a:	0018      	movs	r0, r3
 800039c:	f000 f905 	bl	80005aa <HAL_SYSTICK_Config>
 80003a0:	1e03      	subs	r3, r0, #0
 80003a2:	d001      	beq.n	80003a8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80003a4:	2301      	movs	r3, #1
 80003a6:	e00f      	b.n	80003c8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2b03      	cmp	r3, #3
 80003ac:	d80b      	bhi.n	80003c6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003ae:	6879      	ldr	r1, [r7, #4]
 80003b0:	2301      	movs	r3, #1
 80003b2:	425b      	negs	r3, r3
 80003b4:	2200      	movs	r2, #0
 80003b6:	0018      	movs	r0, r3
 80003b8:	f000 f8e2 	bl	8000580 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80003bc:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <HAL_InitTick+0x64>)
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80003c2:	2300      	movs	r3, #0
 80003c4:	e000      	b.n	80003c8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80003c6:	2301      	movs	r3, #1
}
 80003c8:	0018      	movs	r0, r3
 80003ca:	46bd      	mov	sp, r7
 80003cc:	b003      	add	sp, #12
 80003ce:	bd90      	pop	{r4, r7, pc}
 80003d0:	20000000 	.word	0x20000000
 80003d4:	20000008 	.word	0x20000008
 80003d8:	20000004 	.word	0x20000004

080003dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003e0:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <HAL_IncTick+0x1c>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	001a      	movs	r2, r3
 80003e6:	4b05      	ldr	r3, [pc, #20]	; (80003fc <HAL_IncTick+0x20>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	18d2      	adds	r2, r2, r3
 80003ec:	4b03      	ldr	r3, [pc, #12]	; (80003fc <HAL_IncTick+0x20>)
 80003ee:	601a      	str	r2, [r3, #0]
}
 80003f0:	46c0      	nop			; (mov r8, r8)
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	20000008 	.word	0x20000008
 80003fc:	20000028 	.word	0x20000028

08000400 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  return uwTick;
 8000404:	4b02      	ldr	r3, [pc, #8]	; (8000410 <HAL_GetTick+0x10>)
 8000406:	681b      	ldr	r3, [r3, #0]
}
 8000408:	0018      	movs	r0, r3
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	20000028 	.word	0x20000028

08000414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b084      	sub	sp, #16
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800041c:	f7ff fff0 	bl	8000400 <HAL_GetTick>
 8000420:	0003      	movs	r3, r0
 8000422:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	3301      	adds	r3, #1
 800042c:	d005      	beq.n	800043a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800042e:	4b0a      	ldr	r3, [pc, #40]	; (8000458 <HAL_Delay+0x44>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	001a      	movs	r2, r3
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	189b      	adds	r3, r3, r2
 8000438:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	f7ff ffe0 	bl	8000400 <HAL_GetTick>
 8000440:	0002      	movs	r2, r0
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	1ad3      	subs	r3, r2, r3
 8000446:	68fa      	ldr	r2, [r7, #12]
 8000448:	429a      	cmp	r2, r3
 800044a:	d8f7      	bhi.n	800043c <HAL_Delay+0x28>
  {
  }
}
 800044c:	46c0      	nop			; (mov r8, r8)
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	46bd      	mov	sp, r7
 8000452:	b004      	add	sp, #16
 8000454:	bd80      	pop	{r7, pc}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	20000008 	.word	0x20000008

0800045c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800045c:	b590      	push	{r4, r7, lr}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	0002      	movs	r2, r0
 8000464:	6039      	str	r1, [r7, #0]
 8000466:	1dfb      	adds	r3, r7, #7
 8000468:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800046a:	1dfb      	adds	r3, r7, #7
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	2b7f      	cmp	r3, #127	; 0x7f
 8000470:	d828      	bhi.n	80004c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000472:	4a2f      	ldr	r2, [pc, #188]	; (8000530 <__NVIC_SetPriority+0xd4>)
 8000474:	1dfb      	adds	r3, r7, #7
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	b25b      	sxtb	r3, r3
 800047a:	089b      	lsrs	r3, r3, #2
 800047c:	33c0      	adds	r3, #192	; 0xc0
 800047e:	009b      	lsls	r3, r3, #2
 8000480:	589b      	ldr	r3, [r3, r2]
 8000482:	1dfa      	adds	r2, r7, #7
 8000484:	7812      	ldrb	r2, [r2, #0]
 8000486:	0011      	movs	r1, r2
 8000488:	2203      	movs	r2, #3
 800048a:	400a      	ands	r2, r1
 800048c:	00d2      	lsls	r2, r2, #3
 800048e:	21ff      	movs	r1, #255	; 0xff
 8000490:	4091      	lsls	r1, r2
 8000492:	000a      	movs	r2, r1
 8000494:	43d2      	mvns	r2, r2
 8000496:	401a      	ands	r2, r3
 8000498:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	019b      	lsls	r3, r3, #6
 800049e:	22ff      	movs	r2, #255	; 0xff
 80004a0:	401a      	ands	r2, r3
 80004a2:	1dfb      	adds	r3, r7, #7
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	0018      	movs	r0, r3
 80004a8:	2303      	movs	r3, #3
 80004aa:	4003      	ands	r3, r0
 80004ac:	00db      	lsls	r3, r3, #3
 80004ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004b0:	481f      	ldr	r0, [pc, #124]	; (8000530 <__NVIC_SetPriority+0xd4>)
 80004b2:	1dfb      	adds	r3, r7, #7
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	b25b      	sxtb	r3, r3
 80004b8:	089b      	lsrs	r3, r3, #2
 80004ba:	430a      	orrs	r2, r1
 80004bc:	33c0      	adds	r3, #192	; 0xc0
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80004c2:	e031      	b.n	8000528 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004c4:	4a1b      	ldr	r2, [pc, #108]	; (8000534 <__NVIC_SetPriority+0xd8>)
 80004c6:	1dfb      	adds	r3, r7, #7
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	0019      	movs	r1, r3
 80004cc:	230f      	movs	r3, #15
 80004ce:	400b      	ands	r3, r1
 80004d0:	3b08      	subs	r3, #8
 80004d2:	089b      	lsrs	r3, r3, #2
 80004d4:	3306      	adds	r3, #6
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	18d3      	adds	r3, r2, r3
 80004da:	3304      	adds	r3, #4
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	1dfa      	adds	r2, r7, #7
 80004e0:	7812      	ldrb	r2, [r2, #0]
 80004e2:	0011      	movs	r1, r2
 80004e4:	2203      	movs	r2, #3
 80004e6:	400a      	ands	r2, r1
 80004e8:	00d2      	lsls	r2, r2, #3
 80004ea:	21ff      	movs	r1, #255	; 0xff
 80004ec:	4091      	lsls	r1, r2
 80004ee:	000a      	movs	r2, r1
 80004f0:	43d2      	mvns	r2, r2
 80004f2:	401a      	ands	r2, r3
 80004f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	019b      	lsls	r3, r3, #6
 80004fa:	22ff      	movs	r2, #255	; 0xff
 80004fc:	401a      	ands	r2, r3
 80004fe:	1dfb      	adds	r3, r7, #7
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	0018      	movs	r0, r3
 8000504:	2303      	movs	r3, #3
 8000506:	4003      	ands	r3, r0
 8000508:	00db      	lsls	r3, r3, #3
 800050a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800050c:	4809      	ldr	r0, [pc, #36]	; (8000534 <__NVIC_SetPriority+0xd8>)
 800050e:	1dfb      	adds	r3, r7, #7
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	001c      	movs	r4, r3
 8000514:	230f      	movs	r3, #15
 8000516:	4023      	ands	r3, r4
 8000518:	3b08      	subs	r3, #8
 800051a:	089b      	lsrs	r3, r3, #2
 800051c:	430a      	orrs	r2, r1
 800051e:	3306      	adds	r3, #6
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	18c3      	adds	r3, r0, r3
 8000524:	3304      	adds	r3, #4
 8000526:	601a      	str	r2, [r3, #0]
}
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b003      	add	sp, #12
 800052e:	bd90      	pop	{r4, r7, pc}
 8000530:	e000e100 	.word	0xe000e100
 8000534:	e000ed00 	.word	0xe000ed00

08000538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	1e5a      	subs	r2, r3, #1
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	045b      	lsls	r3, r3, #17
 8000548:	429a      	cmp	r2, r3
 800054a:	d301      	bcc.n	8000550 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800054c:	2301      	movs	r3, #1
 800054e:	e010      	b.n	8000572 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000550:	4b0a      	ldr	r3, [pc, #40]	; (800057c <SysTick_Config+0x44>)
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	3a01      	subs	r2, #1
 8000556:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000558:	2301      	movs	r3, #1
 800055a:	425b      	negs	r3, r3
 800055c:	2103      	movs	r1, #3
 800055e:	0018      	movs	r0, r3
 8000560:	f7ff ff7c 	bl	800045c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000564:	4b05      	ldr	r3, [pc, #20]	; (800057c <SysTick_Config+0x44>)
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800056a:	4b04      	ldr	r3, [pc, #16]	; (800057c <SysTick_Config+0x44>)
 800056c:	2207      	movs	r2, #7
 800056e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000570:	2300      	movs	r3, #0
}
 8000572:	0018      	movs	r0, r3
 8000574:	46bd      	mov	sp, r7
 8000576:	b002      	add	sp, #8
 8000578:	bd80      	pop	{r7, pc}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	e000e010 	.word	0xe000e010

08000580 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	60b9      	str	r1, [r7, #8]
 8000588:	607a      	str	r2, [r7, #4]
 800058a:	210f      	movs	r1, #15
 800058c:	187b      	adds	r3, r7, r1
 800058e:	1c02      	adds	r2, r0, #0
 8000590:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000592:	68ba      	ldr	r2, [r7, #8]
 8000594:	187b      	adds	r3, r7, r1
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	b25b      	sxtb	r3, r3
 800059a:	0011      	movs	r1, r2
 800059c:	0018      	movs	r0, r3
 800059e:	f7ff ff5d 	bl	800045c <__NVIC_SetPriority>
}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	46bd      	mov	sp, r7
 80005a6:	b004      	add	sp, #16
 80005a8:	bd80      	pop	{r7, pc}

080005aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b082      	sub	sp, #8
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	0018      	movs	r0, r3
 80005b6:	f7ff ffbf 	bl	8000538 <SysTick_Config>
 80005ba:	0003      	movs	r3, r0
}
 80005bc:	0018      	movs	r0, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	b002      	add	sp, #8
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80005d2:	e14f      	b.n	8000874 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2101      	movs	r1, #1
 80005da:	697a      	ldr	r2, [r7, #20]
 80005dc:	4091      	lsls	r1, r2
 80005de:	000a      	movs	r2, r1
 80005e0:	4013      	ands	r3, r2
 80005e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d100      	bne.n	80005ec <HAL_GPIO_Init+0x28>
 80005ea:	e140      	b.n	800086e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	2203      	movs	r2, #3
 80005f2:	4013      	ands	r3, r2
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d005      	beq.n	8000604 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	2203      	movs	r2, #3
 80005fe:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000600:	2b02      	cmp	r3, #2
 8000602:	d130      	bne.n	8000666 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	2203      	movs	r2, #3
 8000610:	409a      	lsls	r2, r3
 8000612:	0013      	movs	r3, r2
 8000614:	43da      	mvns	r2, r3
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	4013      	ands	r3, r2
 800061a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	68da      	ldr	r2, [r3, #12]
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	409a      	lsls	r2, r3
 8000626:	0013      	movs	r3, r2
 8000628:	693a      	ldr	r2, [r7, #16]
 800062a:	4313      	orrs	r3, r2
 800062c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	693a      	ldr	r2, [r7, #16]
 8000632:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800063a:	2201      	movs	r2, #1
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	409a      	lsls	r2, r3
 8000640:	0013      	movs	r3, r2
 8000642:	43da      	mvns	r2, r3
 8000644:	693b      	ldr	r3, [r7, #16]
 8000646:	4013      	ands	r3, r2
 8000648:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	091b      	lsrs	r3, r3, #4
 8000650:	2201      	movs	r2, #1
 8000652:	401a      	ands	r2, r3
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	409a      	lsls	r2, r3
 8000658:	0013      	movs	r3, r2
 800065a:	693a      	ldr	r2, [r7, #16]
 800065c:	4313      	orrs	r3, r2
 800065e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	693a      	ldr	r2, [r7, #16]
 8000664:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	2203      	movs	r2, #3
 800066c:	4013      	ands	r3, r2
 800066e:	2b03      	cmp	r3, #3
 8000670:	d017      	beq.n	80006a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	68db      	ldr	r3, [r3, #12]
 8000676:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	2203      	movs	r2, #3
 800067e:	409a      	lsls	r2, r3
 8000680:	0013      	movs	r3, r2
 8000682:	43da      	mvns	r2, r3
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	4013      	ands	r3, r2
 8000688:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	689a      	ldr	r2, [r3, #8]
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	409a      	lsls	r2, r3
 8000694:	0013      	movs	r3, r2
 8000696:	693a      	ldr	r2, [r7, #16]
 8000698:	4313      	orrs	r3, r2
 800069a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	693a      	ldr	r2, [r7, #16]
 80006a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	2203      	movs	r2, #3
 80006a8:	4013      	ands	r3, r2
 80006aa:	2b02      	cmp	r3, #2
 80006ac:	d123      	bne.n	80006f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	08da      	lsrs	r2, r3, #3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	3208      	adds	r2, #8
 80006b6:	0092      	lsls	r2, r2, #2
 80006b8:	58d3      	ldr	r3, [r2, r3]
 80006ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	2207      	movs	r2, #7
 80006c0:	4013      	ands	r3, r2
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	220f      	movs	r2, #15
 80006c6:	409a      	lsls	r2, r3
 80006c8:	0013      	movs	r3, r2
 80006ca:	43da      	mvns	r2, r3
 80006cc:	693b      	ldr	r3, [r7, #16]
 80006ce:	4013      	ands	r3, r2
 80006d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	691a      	ldr	r2, [r3, #16]
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	2107      	movs	r1, #7
 80006da:	400b      	ands	r3, r1
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	409a      	lsls	r2, r3
 80006e0:	0013      	movs	r3, r2
 80006e2:	693a      	ldr	r2, [r7, #16]
 80006e4:	4313      	orrs	r3, r2
 80006e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	08da      	lsrs	r2, r3, #3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	3208      	adds	r2, #8
 80006f0:	0092      	lsls	r2, r2, #2
 80006f2:	6939      	ldr	r1, [r7, #16]
 80006f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	2203      	movs	r2, #3
 8000702:	409a      	lsls	r2, r3
 8000704:	0013      	movs	r3, r2
 8000706:	43da      	mvns	r2, r3
 8000708:	693b      	ldr	r3, [r7, #16]
 800070a:	4013      	ands	r3, r2
 800070c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	2203      	movs	r2, #3
 8000714:	401a      	ands	r2, r3
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	409a      	lsls	r2, r3
 800071c:	0013      	movs	r3, r2
 800071e:	693a      	ldr	r2, [r7, #16]
 8000720:	4313      	orrs	r3, r2
 8000722:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	693a      	ldr	r2, [r7, #16]
 8000728:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	685a      	ldr	r2, [r3, #4]
 800072e:	23c0      	movs	r3, #192	; 0xc0
 8000730:	029b      	lsls	r3, r3, #10
 8000732:	4013      	ands	r3, r2
 8000734:	d100      	bne.n	8000738 <HAL_GPIO_Init+0x174>
 8000736:	e09a      	b.n	800086e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000738:	4b54      	ldr	r3, [pc, #336]	; (800088c <HAL_GPIO_Init+0x2c8>)
 800073a:	699a      	ldr	r2, [r3, #24]
 800073c:	4b53      	ldr	r3, [pc, #332]	; (800088c <HAL_GPIO_Init+0x2c8>)
 800073e:	2101      	movs	r1, #1
 8000740:	430a      	orrs	r2, r1
 8000742:	619a      	str	r2, [r3, #24]
 8000744:	4b51      	ldr	r3, [pc, #324]	; (800088c <HAL_GPIO_Init+0x2c8>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	2201      	movs	r2, #1
 800074a:	4013      	ands	r3, r2
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000750:	4a4f      	ldr	r2, [pc, #316]	; (8000890 <HAL_GPIO_Init+0x2cc>)
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	089b      	lsrs	r3, r3, #2
 8000756:	3302      	adds	r3, #2
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	589b      	ldr	r3, [r3, r2]
 800075c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	2203      	movs	r2, #3
 8000762:	4013      	ands	r3, r2
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	220f      	movs	r2, #15
 8000768:	409a      	lsls	r2, r3
 800076a:	0013      	movs	r3, r2
 800076c:	43da      	mvns	r2, r3
 800076e:	693b      	ldr	r3, [r7, #16]
 8000770:	4013      	ands	r3, r2
 8000772:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	2390      	movs	r3, #144	; 0x90
 8000778:	05db      	lsls	r3, r3, #23
 800077a:	429a      	cmp	r2, r3
 800077c:	d013      	beq.n	80007a6 <HAL_GPIO_Init+0x1e2>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4a44      	ldr	r2, [pc, #272]	; (8000894 <HAL_GPIO_Init+0x2d0>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d00d      	beq.n	80007a2 <HAL_GPIO_Init+0x1de>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4a43      	ldr	r2, [pc, #268]	; (8000898 <HAL_GPIO_Init+0x2d4>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d007      	beq.n	800079e <HAL_GPIO_Init+0x1da>
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4a42      	ldr	r2, [pc, #264]	; (800089c <HAL_GPIO_Init+0x2d8>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d101      	bne.n	800079a <HAL_GPIO_Init+0x1d6>
 8000796:	2303      	movs	r3, #3
 8000798:	e006      	b.n	80007a8 <HAL_GPIO_Init+0x1e4>
 800079a:	2305      	movs	r3, #5
 800079c:	e004      	b.n	80007a8 <HAL_GPIO_Init+0x1e4>
 800079e:	2302      	movs	r3, #2
 80007a0:	e002      	b.n	80007a8 <HAL_GPIO_Init+0x1e4>
 80007a2:	2301      	movs	r3, #1
 80007a4:	e000      	b.n	80007a8 <HAL_GPIO_Init+0x1e4>
 80007a6:	2300      	movs	r3, #0
 80007a8:	697a      	ldr	r2, [r7, #20]
 80007aa:	2103      	movs	r1, #3
 80007ac:	400a      	ands	r2, r1
 80007ae:	0092      	lsls	r2, r2, #2
 80007b0:	4093      	lsls	r3, r2
 80007b2:	693a      	ldr	r2, [r7, #16]
 80007b4:	4313      	orrs	r3, r2
 80007b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80007b8:	4935      	ldr	r1, [pc, #212]	; (8000890 <HAL_GPIO_Init+0x2cc>)
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	089b      	lsrs	r3, r3, #2
 80007be:	3302      	adds	r3, #2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	693a      	ldr	r2, [r7, #16]
 80007c4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80007c6:	4b36      	ldr	r3, [pc, #216]	; (80008a0 <HAL_GPIO_Init+0x2dc>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	43da      	mvns	r2, r3
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	4013      	ands	r3, r2
 80007d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	685a      	ldr	r2, [r3, #4]
 80007da:	2380      	movs	r3, #128	; 0x80
 80007dc:	025b      	lsls	r3, r3, #9
 80007de:	4013      	ands	r3, r2
 80007e0:	d003      	beq.n	80007ea <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80007e2:	693a      	ldr	r2, [r7, #16]
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	4313      	orrs	r3, r2
 80007e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80007ea:	4b2d      	ldr	r3, [pc, #180]	; (80008a0 <HAL_GPIO_Init+0x2dc>)
 80007ec:	693a      	ldr	r2, [r7, #16]
 80007ee:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80007f0:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <HAL_GPIO_Init+0x2dc>)
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	43da      	mvns	r2, r3
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	4013      	ands	r3, r2
 80007fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	685a      	ldr	r2, [r3, #4]
 8000804:	2380      	movs	r3, #128	; 0x80
 8000806:	029b      	lsls	r3, r3, #10
 8000808:	4013      	ands	r3, r2
 800080a:	d003      	beq.n	8000814 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800080c:	693a      	ldr	r2, [r7, #16]
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	4313      	orrs	r3, r2
 8000812:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000814:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <HAL_GPIO_Init+0x2dc>)
 8000816:	693a      	ldr	r2, [r7, #16]
 8000818:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800081a:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <HAL_GPIO_Init+0x2dc>)
 800081c:	689b      	ldr	r3, [r3, #8]
 800081e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	43da      	mvns	r2, r3
 8000824:	693b      	ldr	r3, [r7, #16]
 8000826:	4013      	ands	r3, r2
 8000828:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	685a      	ldr	r2, [r3, #4]
 800082e:	2380      	movs	r3, #128	; 0x80
 8000830:	035b      	lsls	r3, r3, #13
 8000832:	4013      	ands	r3, r2
 8000834:	d003      	beq.n	800083e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000836:	693a      	ldr	r2, [r7, #16]
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	4313      	orrs	r3, r2
 800083c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800083e:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <HAL_GPIO_Init+0x2dc>)
 8000840:	693a      	ldr	r2, [r7, #16]
 8000842:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000844:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <HAL_GPIO_Init+0x2dc>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	43da      	mvns	r2, r3
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	4013      	ands	r3, r2
 8000852:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	685a      	ldr	r2, [r3, #4]
 8000858:	2380      	movs	r3, #128	; 0x80
 800085a:	039b      	lsls	r3, r3, #14
 800085c:	4013      	ands	r3, r2
 800085e:	d003      	beq.n	8000868 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000860:	693a      	ldr	r2, [r7, #16]
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	4313      	orrs	r3, r2
 8000866:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000868:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <HAL_GPIO_Init+0x2dc>)
 800086a:	693a      	ldr	r2, [r7, #16]
 800086c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	3301      	adds	r3, #1
 8000872:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	40da      	lsrs	r2, r3
 800087c:	1e13      	subs	r3, r2, #0
 800087e:	d000      	beq.n	8000882 <HAL_GPIO_Init+0x2be>
 8000880:	e6a8      	b.n	80005d4 <HAL_GPIO_Init+0x10>
  } 
}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	b006      	add	sp, #24
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40021000 	.word	0x40021000
 8000890:	40010000 	.word	0x40010000
 8000894:	48000400 	.word	0x48000400
 8000898:	48000800 	.word	0x48000800
 800089c:	48000c00 	.word	0x48000c00
 80008a0:	40010400 	.word	0x40010400

080008a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	000a      	movs	r2, r1
 80008ae:	1cbb      	adds	r3, r7, #2
 80008b0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80008b8:	1cbb      	adds	r3, r7, #2
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	68fa      	ldr	r2, [r7, #12]
 80008be:	4013      	ands	r3, r2
 80008c0:	041a      	lsls	r2, r3, #16
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	43db      	mvns	r3, r3
 80008c6:	1cb9      	adds	r1, r7, #2
 80008c8:	8809      	ldrh	r1, [r1, #0]
 80008ca:	400b      	ands	r3, r1
 80008cc:	431a      	orrs	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	619a      	str	r2, [r3, #24]
}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b004      	add	sp, #16
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d101      	bne.n	80008f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80008ec:	2301      	movs	r3, #1
 80008ee:	e0b3      	b.n	8000a58 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80008f0:	4b5b      	ldr	r3, [pc, #364]	; (8000a60 <HAL_RCC_ClockConfig+0x184>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2201      	movs	r2, #1
 80008f6:	4013      	ands	r3, r2
 80008f8:	683a      	ldr	r2, [r7, #0]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d911      	bls.n	8000922 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008fe:	4b58      	ldr	r3, [pc, #352]	; (8000a60 <HAL_RCC_ClockConfig+0x184>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2201      	movs	r2, #1
 8000904:	4393      	bics	r3, r2
 8000906:	0019      	movs	r1, r3
 8000908:	4b55      	ldr	r3, [pc, #340]	; (8000a60 <HAL_RCC_ClockConfig+0x184>)
 800090a:	683a      	ldr	r2, [r7, #0]
 800090c:	430a      	orrs	r2, r1
 800090e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000910:	4b53      	ldr	r3, [pc, #332]	; (8000a60 <HAL_RCC_ClockConfig+0x184>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2201      	movs	r2, #1
 8000916:	4013      	ands	r3, r2
 8000918:	683a      	ldr	r2, [r7, #0]
 800091a:	429a      	cmp	r2, r3
 800091c:	d001      	beq.n	8000922 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	e09a      	b.n	8000a58 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2202      	movs	r2, #2
 8000928:	4013      	ands	r3, r2
 800092a:	d015      	beq.n	8000958 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2204      	movs	r2, #4
 8000932:	4013      	ands	r3, r2
 8000934:	d006      	beq.n	8000944 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000936:	4b4b      	ldr	r3, [pc, #300]	; (8000a64 <HAL_RCC_ClockConfig+0x188>)
 8000938:	685a      	ldr	r2, [r3, #4]
 800093a:	4b4a      	ldr	r3, [pc, #296]	; (8000a64 <HAL_RCC_ClockConfig+0x188>)
 800093c:	21e0      	movs	r1, #224	; 0xe0
 800093e:	00c9      	lsls	r1, r1, #3
 8000940:	430a      	orrs	r2, r1
 8000942:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000944:	4b47      	ldr	r3, [pc, #284]	; (8000a64 <HAL_RCC_ClockConfig+0x188>)
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	22f0      	movs	r2, #240	; 0xf0
 800094a:	4393      	bics	r3, r2
 800094c:	0019      	movs	r1, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	689a      	ldr	r2, [r3, #8]
 8000952:	4b44      	ldr	r3, [pc, #272]	; (8000a64 <HAL_RCC_ClockConfig+0x188>)
 8000954:	430a      	orrs	r2, r1
 8000956:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2201      	movs	r2, #1
 800095e:	4013      	ands	r3, r2
 8000960:	d040      	beq.n	80009e4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d107      	bne.n	800097a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800096a:	4b3e      	ldr	r3, [pc, #248]	; (8000a64 <HAL_RCC_ClockConfig+0x188>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	2380      	movs	r3, #128	; 0x80
 8000970:	029b      	lsls	r3, r3, #10
 8000972:	4013      	ands	r3, r2
 8000974:	d114      	bne.n	80009a0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
 8000978:	e06e      	b.n	8000a58 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	2b02      	cmp	r3, #2
 8000980:	d107      	bne.n	8000992 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000982:	4b38      	ldr	r3, [pc, #224]	; (8000a64 <HAL_RCC_ClockConfig+0x188>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	2380      	movs	r3, #128	; 0x80
 8000988:	049b      	lsls	r3, r3, #18
 800098a:	4013      	ands	r3, r2
 800098c:	d108      	bne.n	80009a0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	e062      	b.n	8000a58 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000992:	4b34      	ldr	r3, [pc, #208]	; (8000a64 <HAL_RCC_ClockConfig+0x188>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2202      	movs	r2, #2
 8000998:	4013      	ands	r3, r2
 800099a:	d101      	bne.n	80009a0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800099c:	2301      	movs	r3, #1
 800099e:	e05b      	b.n	8000a58 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009a0:	4b30      	ldr	r3, [pc, #192]	; (8000a64 <HAL_RCC_ClockConfig+0x188>)
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	2203      	movs	r2, #3
 80009a6:	4393      	bics	r3, r2
 80009a8:	0019      	movs	r1, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	685a      	ldr	r2, [r3, #4]
 80009ae:	4b2d      	ldr	r3, [pc, #180]	; (8000a64 <HAL_RCC_ClockConfig+0x188>)
 80009b0:	430a      	orrs	r2, r1
 80009b2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80009b4:	f7ff fd24 	bl	8000400 <HAL_GetTick>
 80009b8:	0003      	movs	r3, r0
 80009ba:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80009bc:	e009      	b.n	80009d2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009be:	f7ff fd1f 	bl	8000400 <HAL_GetTick>
 80009c2:	0002      	movs	r2, r0
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	1ad3      	subs	r3, r2, r3
 80009c8:	4a27      	ldr	r2, [pc, #156]	; (8000a68 <HAL_RCC_ClockConfig+0x18c>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d901      	bls.n	80009d2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80009ce:	2303      	movs	r3, #3
 80009d0:	e042      	b.n	8000a58 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80009d2:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <HAL_RCC_ClockConfig+0x188>)
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	220c      	movs	r2, #12
 80009d8:	401a      	ands	r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d1ec      	bne.n	80009be <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80009e4:	4b1e      	ldr	r3, [pc, #120]	; (8000a60 <HAL_RCC_ClockConfig+0x184>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2201      	movs	r2, #1
 80009ea:	4013      	ands	r3, r2
 80009ec:	683a      	ldr	r2, [r7, #0]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	d211      	bcs.n	8000a16 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009f2:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <HAL_RCC_ClockConfig+0x184>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2201      	movs	r2, #1
 80009f8:	4393      	bics	r3, r2
 80009fa:	0019      	movs	r1, r3
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <HAL_RCC_ClockConfig+0x184>)
 80009fe:	683a      	ldr	r2, [r7, #0]
 8000a00:	430a      	orrs	r2, r1
 8000a02:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000a04:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <HAL_RCC_ClockConfig+0x184>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2201      	movs	r2, #1
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	683a      	ldr	r2, [r7, #0]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d001      	beq.n	8000a16 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e020      	b.n	8000a58 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2204      	movs	r2, #4
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	d009      	beq.n	8000a34 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000a20:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <HAL_RCC_ClockConfig+0x188>)
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	4a11      	ldr	r2, [pc, #68]	; (8000a6c <HAL_RCC_ClockConfig+0x190>)
 8000a26:	4013      	ands	r3, r2
 8000a28:	0019      	movs	r1, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	68da      	ldr	r2, [r3, #12]
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <HAL_RCC_ClockConfig+0x188>)
 8000a30:	430a      	orrs	r2, r1
 8000a32:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000a34:	f000 f820 	bl	8000a78 <HAL_RCC_GetSysClockFreq>
 8000a38:	0001      	movs	r1, r0
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <HAL_RCC_ClockConfig+0x188>)
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	091b      	lsrs	r3, r3, #4
 8000a40:	220f      	movs	r2, #15
 8000a42:	4013      	ands	r3, r2
 8000a44:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <HAL_RCC_ClockConfig+0x194>)
 8000a46:	5cd3      	ldrb	r3, [r2, r3]
 8000a48:	000a      	movs	r2, r1
 8000a4a:	40da      	lsrs	r2, r3
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <HAL_RCC_ClockConfig+0x198>)
 8000a4e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a50:	2003      	movs	r0, #3
 8000a52:	f7ff fc8f 	bl	8000374 <HAL_InitTick>
  
  return HAL_OK;
 8000a56:	2300      	movs	r3, #0
}
 8000a58:	0018      	movs	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	b004      	add	sp, #16
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40022000 	.word	0x40022000
 8000a64:	40021000 	.word	0x40021000
 8000a68:	00001388 	.word	0x00001388
 8000a6c:	fffff8ff 	.word	0xfffff8ff
 8000a70:	08000cf4 	.word	0x08000cf4
 8000a74:	20000000 	.word	0x20000000

08000a78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000a78:	b590      	push	{r4, r7, lr}
 8000a7a:	b08f      	sub	sp, #60	; 0x3c
 8000a7c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000a7e:	2314      	movs	r3, #20
 8000a80:	18fb      	adds	r3, r7, r3
 8000a82:	4a2b      	ldr	r2, [pc, #172]	; (8000b30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000a84:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a86:	c313      	stmia	r3!, {r0, r1, r4}
 8000a88:	6812      	ldr	r2, [r2, #0]
 8000a8a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	4a29      	ldr	r2, [pc, #164]	; (8000b34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000a90:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a92:	c313      	stmia	r3!, {r0, r1, r4}
 8000a94:	6812      	ldr	r2, [r2, #0]
 8000a96:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8000aac:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab4:	220c      	movs	r2, #12
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	2b04      	cmp	r3, #4
 8000aba:	d002      	beq.n	8000ac2 <HAL_RCC_GetSysClockFreq+0x4a>
 8000abc:	2b08      	cmp	r3, #8
 8000abe:	d003      	beq.n	8000ac8 <HAL_RCC_GetSysClockFreq+0x50>
 8000ac0:	e02d      	b.n	8000b1e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000ac2:	4b1e      	ldr	r3, [pc, #120]	; (8000b3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8000ac4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000ac6:	e02d      	b.n	8000b24 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aca:	0c9b      	lsrs	r3, r3, #18
 8000acc:	220f      	movs	r2, #15
 8000ace:	4013      	ands	r3, r2
 8000ad0:	2214      	movs	r2, #20
 8000ad2:	18ba      	adds	r2, r7, r2
 8000ad4:	5cd3      	ldrb	r3, [r2, r3]
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000ad8:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000adc:	220f      	movs	r2, #15
 8000ade:	4013      	ands	r3, r2
 8000ae0:	1d3a      	adds	r2, r7, #4
 8000ae2:	5cd3      	ldrb	r3, [r2, r3]
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000ae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ae8:	2380      	movs	r3, #128	; 0x80
 8000aea:	025b      	lsls	r3, r3, #9
 8000aec:	4013      	ands	r3, r2
 8000aee:	d009      	beq.n	8000b04 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000af0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000af2:	4812      	ldr	r0, [pc, #72]	; (8000b3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8000af4:	f7ff fb08 	bl	8000108 <__udivsi3>
 8000af8:	0003      	movs	r3, r0
 8000afa:	001a      	movs	r2, r3
 8000afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afe:	4353      	muls	r3, r2
 8000b00:	637b      	str	r3, [r7, #52]	; 0x34
 8000b02:	e009      	b.n	8000b18 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000b04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000b06:	000a      	movs	r2, r1
 8000b08:	0152      	lsls	r2, r2, #5
 8000b0a:	1a52      	subs	r2, r2, r1
 8000b0c:	0193      	lsls	r3, r2, #6
 8000b0e:	1a9b      	subs	r3, r3, r2
 8000b10:	00db      	lsls	r3, r3, #3
 8000b12:	185b      	adds	r3, r3, r1
 8000b14:	021b      	lsls	r3, r3, #8
 8000b16:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8000b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b1a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000b1c:	e002      	b.n	8000b24 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000b1e:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8000b20:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000b22:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8000b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8000b26:	0018      	movs	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b00f      	add	sp, #60	; 0x3c
 8000b2c:	bd90      	pop	{r4, r7, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	08000cd4 	.word	0x08000cd4
 8000b34:	08000ce4 	.word	0x08000ce4
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	007a1200 	.word	0x007a1200

08000b40 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that 
  * will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);

  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	221f      	movs	r2, #31
 8000b4c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct->OscillatorType |= RCC_OSCILLATORTYPE_HSI48;
#endif /* RCC_HSI48_SUPPORT */


  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8000b4e:	4b48      	ldr	r3, [pc, #288]	; (8000c70 <HAL_RCC_GetOscConfig+0x130>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	2380      	movs	r3, #128	; 0x80
 8000b54:	02db      	lsls	r3, r3, #11
 8000b56:	401a      	ands	r2, r3
 8000b58:	2380      	movs	r3, #128	; 0x80
 8000b5a:	02db      	lsls	r3, r3, #11
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d103      	bne.n	8000b68 <HAL_RCC_GetOscConfig+0x28>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2205      	movs	r2, #5
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	e00f      	b.n	8000b88 <HAL_RCC_GetOscConfig+0x48>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 8000b68:	4b41      	ldr	r3, [pc, #260]	; (8000c70 <HAL_RCC_GetOscConfig+0x130>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	2380      	movs	r3, #128	; 0x80
 8000b6e:	025b      	lsls	r3, r3, #9
 8000b70:	401a      	ands	r2, r3
 8000b72:	2380      	movs	r3, #128	; 0x80
 8000b74:	025b      	lsls	r3, r3, #9
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d103      	bne.n	8000b82 <HAL_RCC_GetOscConfig+0x42>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	e002      	b.n	8000b88 <HAL_RCC_GetOscConfig+0x48>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2200      	movs	r2, #0
 8000b86:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8000b88:	4b39      	ldr	r3, [pc, #228]	; (8000c70 <HAL_RCC_GetOscConfig+0x130>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4013      	ands	r3, r2
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d103      	bne.n	8000b9c <HAL_RCC_GetOscConfig+0x5c>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2201      	movs	r2, #1
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	e002      	b.n	8000ba2 <HAL_RCC_GetOscConfig+0x62>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  }
  
  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_BitNumber);
 8000ba2:	4b33      	ldr	r3, [pc, #204]	; (8000c70 <HAL_RCC_GetOscConfig+0x130>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	08db      	lsrs	r3, r3, #3
 8000ba8:	221f      	movs	r2, #31
 8000baa:	401a      	ands	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	611a      	str	r2, [r3, #16]
  
  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8000bb0:	4b2f      	ldr	r3, [pc, #188]	; (8000c70 <HAL_RCC_GetOscConfig+0x130>)
 8000bb2:	6a1b      	ldr	r3, [r3, #32]
 8000bb4:	2204      	movs	r2, #4
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	2b04      	cmp	r3, #4
 8000bba:	d103      	bne.n	8000bc4 <HAL_RCC_GetOscConfig+0x84>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2205      	movs	r2, #5
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	e00c      	b.n	8000bde <HAL_RCC_GetOscConfig+0x9e>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8000bc4:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <HAL_RCC_GetOscConfig+0x130>)
 8000bc6:	6a1b      	ldr	r3, [r3, #32]
 8000bc8:	2201      	movs	r2, #1
 8000bca:	4013      	ands	r3, r2
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d103      	bne.n	8000bd8 <HAL_RCC_GetOscConfig+0x98>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	e002      	b.n	8000bde <HAL_RCC_GetOscConfig+0x9e>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  }
  
  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8000bde:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <HAL_RCC_GetOscConfig+0x130>)
 8000be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be2:	2201      	movs	r2, #1
 8000be4:	4013      	ands	r3, r2
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d103      	bne.n	8000bf2 <HAL_RCC_GetOscConfig+0xb2>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2201      	movs	r2, #1
 8000bee:	61da      	str	r2, [r3, #28]
 8000bf0:	e002      	b.n	8000bf8 <HAL_RCC_GetOscConfig+0xb8>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	61da      	str	r2, [r3, #28]
  }
  
  /* Get the HSI14 configuration -----------------------------------------------*/
  if((RCC->CR2 & RCC_CR2_HSI14ON) == RCC_CR2_HSI14ON)
 8000bf8:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <HAL_RCC_GetOscConfig+0x130>)
 8000bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	4013      	ands	r3, r2
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d103      	bne.n	8000c0c <HAL_RCC_GetOscConfig+0xcc>
  {
    RCC_OscInitStruct->HSI14State = RCC_HSI_ON;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2201      	movs	r2, #1
 8000c08:	615a      	str	r2, [r3, #20]
 8000c0a:	e002      	b.n	8000c12 <HAL_RCC_GetOscConfig+0xd2>
  }
  else
  {
    RCC_OscInitStruct->HSI14State = RCC_HSI_OFF;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	615a      	str	r2, [r3, #20]
  }

  RCC_OscInitStruct->HSI14CalibrationValue = (uint32_t)((RCC->CR2 & RCC_CR2_HSI14TRIM) >> RCC_HSI14TRIM_BIT_NUMBER);
 8000c12:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <HAL_RCC_GetOscConfig+0x130>)
 8000c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c16:	08db      	lsrs	r3, r3, #3
 8000c18:	221f      	movs	r2, #31
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	619a      	str	r2, [r3, #24]
  /* Get the HSI48 configuration if any-----------------------------------------*/
  RCC_OscInitStruct->HSI48State = __HAL_RCC_GET_HSI48_STATE();
#endif /* RCC_HSI48_SUPPORT */

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8000c20:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <HAL_RCC_GetOscConfig+0x130>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	2380      	movs	r3, #128	; 0x80
 8000c26:	045b      	lsls	r3, r3, #17
 8000c28:	401a      	ands	r2, r3
 8000c2a:	2380      	movs	r3, #128	; 0x80
 8000c2c:	045b      	lsls	r3, r3, #17
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d103      	bne.n	8000c3a <HAL_RCC_GetOscConfig+0xfa>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2202      	movs	r2, #2
 8000c36:	621a      	str	r2, [r3, #32]
 8000c38:	e002      	b.n	8000c40 <HAL_RCC_GetOscConfig+0x100>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	621a      	str	r2, [r3, #32]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <HAL_RCC_GetOscConfig+0x130>)
 8000c42:	685a      	ldr	r2, [r3, #4]
 8000c44:	2380      	movs	r3, #128	; 0x80
 8000c46:	025b      	lsls	r3, r3, #9
 8000c48:	401a      	ands	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMUL);
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <HAL_RCC_GetOscConfig+0x130>)
 8000c50:	685a      	ldr	r2, [r3, #4]
 8000c52:	23f0      	movs	r3, #240	; 0xf0
 8000c54:	039b      	lsls	r3, r3, #14
 8000c56:	401a      	ands	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PREDIV = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV);
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <HAL_RCC_GetOscConfig+0x130>)
 8000c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c60:	220f      	movs	r2, #15
 8000c62:	401a      	ands	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000c68:	46c0      	nop			; (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b002      	add	sp, #8
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40021000 	.word	0x40021000

08000c74 <__libc_init_array>:
 8000c74:	b570      	push	{r4, r5, r6, lr}
 8000c76:	2600      	movs	r6, #0
 8000c78:	4d0c      	ldr	r5, [pc, #48]	; (8000cac <__libc_init_array+0x38>)
 8000c7a:	4c0d      	ldr	r4, [pc, #52]	; (8000cb0 <__libc_init_array+0x3c>)
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	10a4      	asrs	r4, r4, #2
 8000c80:	42a6      	cmp	r6, r4
 8000c82:	d109      	bne.n	8000c98 <__libc_init_array+0x24>
 8000c84:	2600      	movs	r6, #0
 8000c86:	f000 f819 	bl	8000cbc <_init>
 8000c8a:	4d0a      	ldr	r5, [pc, #40]	; (8000cb4 <__libc_init_array+0x40>)
 8000c8c:	4c0a      	ldr	r4, [pc, #40]	; (8000cb8 <__libc_init_array+0x44>)
 8000c8e:	1b64      	subs	r4, r4, r5
 8000c90:	10a4      	asrs	r4, r4, #2
 8000c92:	42a6      	cmp	r6, r4
 8000c94:	d105      	bne.n	8000ca2 <__libc_init_array+0x2e>
 8000c96:	bd70      	pop	{r4, r5, r6, pc}
 8000c98:	00b3      	lsls	r3, r6, #2
 8000c9a:	58eb      	ldr	r3, [r5, r3]
 8000c9c:	4798      	blx	r3
 8000c9e:	3601      	adds	r6, #1
 8000ca0:	e7ee      	b.n	8000c80 <__libc_init_array+0xc>
 8000ca2:	00b3      	lsls	r3, r6, #2
 8000ca4:	58eb      	ldr	r3, [r5, r3]
 8000ca6:	4798      	blx	r3
 8000ca8:	3601      	adds	r6, #1
 8000caa:	e7f2      	b.n	8000c92 <__libc_init_array+0x1e>
 8000cac:	08000d04 	.word	0x08000d04
 8000cb0:	08000d04 	.word	0x08000d04
 8000cb4:	08000d04 	.word	0x08000d04
 8000cb8:	08000d08 	.word	0x08000d08

08000cbc <_init>:
 8000cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cc2:	bc08      	pop	{r3}
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	4770      	bx	lr

08000cc8 <_fini>:
 8000cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cce:	bc08      	pop	{r3}
 8000cd0:	469e      	mov	lr, r3
 8000cd2:	4770      	bx	lr
